services:
  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    ports:
      - "9092:9092"    # INSIDE listener 포트
      - "29092:29092"  # OUTSIDE listener 포트
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092  # 두 listener가 서로 다른 포트를 사용하도록 설정
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  mysql:
    image: mysql:5.7
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: order_db
      # MYSQL_USER: root
      # MYSQL_PASSWORD: 123456
    volumes:
      - ./mysql/data:/var/lib/mysql

  order-service:
    build:
      context: ./order-service               # order-service 디렉토리에서 Dockerfile 빌드
      dockerfile: Dockerfile
    ports:
      - "8081:8081"                          # 호스트 포트 -> 컨테이너 포트 매핑
    environment:
      SERVER_PORT: 8081
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
      - mysql

  payment-service:
    build:
      context: ./payment-service             # payment-service 디렉토리에서 Dockerfile 빌드
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/payment_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
      - mysql

  inventory-service:
    build:
      context: ./inventory-service           # inventory-service 디렉토리에서 Dockerfile 빌드
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      SERVER_PORT: 8083
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/inventory_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
      - mysql

  shipping-service:
    build:
      context: ./shipping-service            # shipping-service 디렉토리에서 Dockerfile 빌드
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      SERVER_PORT: 8084
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/shipping_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
      - mysql

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      - order-service
      - inventory-service
      - payment-service
      - shipping-service

networks:
  default:
    driver: bridge
